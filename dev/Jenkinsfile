pipeline {
    agent any

    tools {
        nodejs 'node24'
    }

    environment {
        DOCKER_COMPOSE = 'docker compose'
        WORKSPACE_DIR = 'dev'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh '''
                    echo "Current directory: $(pwd)"
                    echo "Listing all files:"
                    ls -la
                    echo "Listing dev directory:"
                    ls -la dev/
                    echo "Listing dev/back directory:"
                    ls -la dev/back/
                '''
            }
        }

        stage('Verify Workspace') {
            steps {
                dir("${WORKSPACE_DIR}") {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing all files:"
                        ls -la
                        echo "Checking if package.json exists:"
                        test -f back/package.json && echo "package.json exists" || echo "package.json not found"
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir("${WORKSPACE_DIR}/front/caei_training_front") {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing all files:"
                        ls -la
                        npm install
                        npm run build
                    '''
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir("${WORKSPACE_DIR}/back") {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing all files:"
                        ls -la
                        echo "Contents of package.json:"
                        cat package.json
                        npm install
                    '''
                }
            }
        }

        stage('Verify Docker Access') {
            steps {
                sh '''
                    echo "Checking Docker socket access..."
                    if [ -S /var/run/docker.sock ]; then
                        echo "Docker socket exists"
                        ls -l /var/run/docker.sock
                        
                        # Check if jenkins user has access to docker socket
                        if groups jenkins | grep -q docker; then
                            echo "Jenkins user is in docker group"
                        else
                            echo "WARNING: Jenkins user is not in docker group"
                            echo "Current groups for jenkins:"
                            groups jenkins
                        fi
                    else
                        echo "ERROR: Docker socket not found at /var/run/docker.sock"
                        echo "Please ensure Docker socket is mounted in the Jenkins container"
                        exit 1
                    fi
                '''
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                    echo "Attempting to build Docker images..."
                    if [ -S /var/run/docker.sock ]; then
                        docker compose build
                    else
                        echo "ERROR: Cannot access Docker socket"
                        exit 1
                    fi
                '''
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                    echo "Attempting to deploy..."
                    if [ -S /var/run/docker.sock ]; then
                        docker compose down
                        docker compose up -d
                    else
                        echo "ERROR: Cannot access Docker socket"
                        exit 1
                    fi
                '''
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
