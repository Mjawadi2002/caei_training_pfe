pipeline {
    agent any

    tools {
        nodejs 'node24'
    }

    environment {
        DOCKER_COMPOSE = 'docker compose'
        WORKSPACE_DIR = 'dev'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh '''
                    echo "Current directory: $(pwd)"
                    echo "Listing all files:"
                    ls -la
                    echo "Listing dev directory:"
                    ls -la dev/
                    echo "Listing dev/back directory:"
                    ls -la dev/back/
                '''
            }
        }

        stage('Verify Workspace') {
            steps {
                dir("${WORKSPACE_DIR}") {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing all files:"
                        ls -la
                        echo "Checking if package.json exists:"
                        test -f back/package.json && echo "package.json exists" || echo "package.json not found"
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir("${WORKSPACE_DIR}/front/caei_training_front") {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing all files:"
                        ls -la
                        npm install
                        npm run build
                    '''
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir("${WORKSPACE_DIR}/back") {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing all files:"
                        ls -la
                        echo "Contents of package.json:"
                        cat package.json
                        npm install
                    '''
                }
            }
        }

        stage('Install Docker') {
            steps {
                sh '''
                    echo "Installing Docker..."
                    # Update package list
                    sudo apt-get update
                    
                    # Install required packages
                    sudo apt-get install -y \
                        apt-transport-https \
                        ca-certificates \
                        curl \
                        gnupg \
                        lsb-release
                    
                    # Add Docker's official GPG key
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                    
                    # Set up the stable repository
                    echo \
                      "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                    
                    # Update package list again
                    sudo apt-get update
                    
                    # Install Docker Engine
                    sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                    
                    # Start Docker service
                    sudo service docker start
                    
                    # Add jenkins user to docker group
                    sudo usermod -aG docker jenkins
                    
                    # Verify Docker installation
                    docker --version
                    
                    # Install Docker Compose
                    sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                    
                    # Verify Docker Compose installation
                    docker-compose --version
                '''
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                    echo "Attempting to build Docker images..."
                    docker compose build
                '''
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                    echo "Attempting to deploy..."
                    docker compose down
                    docker compose up -d
                '''
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
